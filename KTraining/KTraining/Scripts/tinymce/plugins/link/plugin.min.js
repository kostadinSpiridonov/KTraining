tinymce.PluginManager.add("link", function (n) { function i(t) { return function () { var i = n.settings.link_list; typeof i == "string" ? tinymce.util.XHR.send({ url: i, success: function (n) { t(tinymce.util.JSON.parse(n)) } }) : t(i) } } function t(t) { function w(n) { var t = h.find("#text"); (!t.value() || n.lastControl && t.value() == n.lastControl.text()) && t.value(n.control.text()), h.find("#href").value(n.control.value()) } function k() { var i = [{ text: "None", value: "" }]; return tinymce.each(t, function (t) { i.push({ text: t.text || t.title, value: n.convertURL(t.value || t.url, "href"), menu: t.menu }) }), i } function c(t, r, u) { var f, e = []; return tinymce.each(n.settings[t] || u, function (n) { var t = { text: n.text || n.title, value: n.value }; e.push(t), (i[r] === n.value || !f && n.selected) && (f = t) }), f && !i[r] && (i[r] = f.value, f.selected = !0), e } function d(t) { var i = []; return tinymce.each(n.dom.select("a:not([href])"), function (n) { var r = n.name || n.id; r && i.push({ text: r, value: "#" + r, selected: t.indexOf("#" + r) != -1 }) }), i.length ? (i.unshift({ text: "None", value: "" }), { name: "anchor", type: "listbox", label: "Anchors", values: i, onselect: w }) : void 0 } function b() { e && e.value(n.convertURL(this.value(), "href")), !s && i.text.length === 0 && f && this.parent().parent().find("#text")[0].value(this.value()) } function g(n) { var r = o.getContent(), t, i; if (/</.test(r) && (!/^<a [^>]+>[^<]+<\/a>$/.test(r) || r.indexOf("href=") == -1)) return !1; if (n) { if (t = n.childNodes, t.length === 0) return !1; for (i = t.length - 1; i >= 0; i--) if (t[i].nodeType != 3) return !1 } return !0 } var i = {}, o = n.selection, u = n.dom, l, r, s, h, f, a, e, v, y, p; l = o.getNode(), r = u.getParent(l, "a[href]"), f = g(), i.text = s = r ? r.innerText || r.textContent : o.getContent({ format: "text" }), i.href = r ? u.getAttrib(r, "href") : "", i.target = r ? u.getAttrib(r, "target") : n.settings.default_link_target || null, i.rel = r ? u.getAttrib(r, "rel") : null, i["class"] = r ? u.getAttrib(r, "class") : null, f && (a = { name: "text", type: "textbox", size: 40, label: "Text to display", onchange: function () { i.text = this.value() } }), t && (e = { type: "listbox", label: "Link list", values: k(), onselect: w, value: n.convertURL(i.href, "href"), onPostRender: function () { e = this } }), n.settings.target_list !== !1 && (y = { name: "target", type: "listbox", label: "Target", values: c("target_list", "target", [{ text: "None", value: "" }, { text: "New window", value: "_blank" }]) }), n.settings.rel_list && (v = { name: "rel", type: "listbox", label: "Rel", values: c("rel_list", "rel", [{ text: "None", value: "" }]) }), n.settings.link_class_list && (p = { name: "class", type: "listbox", label: "Class", values: c("link_class_list", "class") }), h = n.windowManager.open({ title: "Insert link", data: i, body: [{ name: "href", type: "filepicker", filetype: "file", size: 40, autofocus: !0, label: "Url", onchange: b, onkeyup: b }, a, d(i.href), e, v, y, p], onSubmit: function (t) { function c(t, i) { var r = n.selection.getRng(); window.setTimeout(function () { n.windowManager.confirm(t, function (t) { n.selection.setRng(r), i(t) }) }, 0) } function h() { r ? (n.focus(), f && i.text != s && (r.innerText = i.text), u.setAttribs(r, { href: e, target: i.target ? i.target : null, rel: i.rel ? i.rel : null, "class": i["class"] ? i["class"] : null }), o.select(r), n.undoManager.add()) : f ? n.insertContent(u.createHTML("a", { href: e, target: i.target ? i.target : null, rel: i.rel ? i.rel : null, "class": i["class"] ? i["class"] : null }, u.encode(i.text))) : n.execCommand("mceInsertLink", !1, { href: e, target: i.target, rel: i.rel ? i.rel : null }) } var e; if (i = tinymce.extend(i, t.data), e = i.href, !e) { n.execCommand("unlink"); return } if (e.indexOf("@") > 0 && e.indexOf("//") == -1 && e.indexOf("mailto:") == -1) { c("The URL you entered seems to be an email address. Do you want to add the required mailto: prefix?", function (n) { n && (e = "mailto:" + e), h() }); return } if (/^\s*www\./i.test(e)) { c("The URL you entered seems to be an external link. Do you want to add the required http:// prefix?", function (n) { n && (e = "http://" + e), h() }); return } h() } }) } n.addButton("link", { icon: "link", tooltip: "Insert/edit link", shortcut: "Ctrl+K", onclick: i(t), stateSelector: "a[href]" }), n.addButton("unlink", { icon: "unlink", tooltip: "Remove link", cmd: "unlink", stateSelector: "a[href]" }), n.addShortcut("Ctrl+K", "", i(t)), this.showDialog = t, n.addMenuItem("link", { icon: "link", text: "Insert link", shortcut: "Ctrl+K", onclick: i(t), stateSelector: "a[href]", context: "insert", prependToContext: !0 }) });
//@ sourceMappingURL=plugin.min.js.map